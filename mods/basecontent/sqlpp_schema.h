#pragma once

// generated by ddl2cpp
// clang-format off

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace webrogue
{
namespace basecontent
{
  namespace BasecontentScores_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Score
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "score";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T score;
            T& operator()() { return score; }
            const T& operator()() const { return score; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace BasecontentScores_

  struct BasecontentScores: sqlpp::table_t<BasecontentScores,
               BasecontentScores_::Id,
               BasecontentScores_::X,
               BasecontentScores_::Y,
               BasecontentScores_::Score>
  {
    static constexpr const char ddl[] = "CREATE TABLE IF NOT EXISTS basecontent_scores (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    x INTEGER NOT NULL,\n    y INTEGER NOT NULL,\n    score INTEGER NOT NULL\n)";
    struct _alias_t
    {
      static constexpr const char _literal[] =  "basecontent_scores";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T basecontentScores;
        T& operator()() { return basecontentScores; }
        const T& operator()() const { return basecontentScores; }
      };
    };
  };
} // namespace basecontent
} // namespace webrogue
